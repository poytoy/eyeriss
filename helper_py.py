# -*- coding: utf-8 -*-
"""helper.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19TQkvpKhOUpGiaxfQh5MyFL3hIosvZPZ
"""

import numpy as np
import cv2
import random
from tensorflow.keras.datasets import mnist

new_size = 6
image_mem_file = "image_q7_8.mem"
kernel_mem_file = "kernel_q7_8.mem"

def float_to_q7_8(val):
    return np.int16(round(val * 256))  # 2^8

def q7_8_to_hex(val):
    return f"{np.uint16(val):04x}"

# Load MNIST image
(x_train, y_train), _ = mnist.load_data()
idx = random.randint(0, len(x_train) - 1)
image = x_train[idx]
label = y_train[idx]
print(f"Selected image index: {idx}, label: {label}")

# Resize + binarize
resized = cv2.resize(image, (new_size, new_size), interpolation=cv2.INTER_NEAREST)
_, binary_img = cv2.threshold(resized, 127, 1, cv2.THRESH_BINARY)
image_q78 = binary_img.astype(np.float32)

# Define kernel in float
kernel_float = np.array([
    [0, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1, 0]
], dtype=np.float32)

# Convert image and kernel to Q7.8 fixed-point (int16)
image_q78_int = np.vectorize(float_to_q7_8)(image_q78)
kernel_q78_int = np.vectorize(float_to_q7_8)(kernel_float)

# Save image (row-major)
with open(image_mem_file, "w") as f:
    for row in image_q78_int:
        for val in row:
            f.write(f"{q7_8_to_hex(val)}\n")

# Save kernel (column-major)
with open(kernel_mem_file, "w") as f:
    for c in range(new_size):
        for r in range(new_size):
            f.write(f"{q7_8_to_hex(kernel_q78_int[r][c])}\n")

# ðŸ§® Compute expected output (column-wise accumulation in Q7.8)
# Multiply in 32-bit, shift >>8, and accumulate
elementwise_q78 = (image_q78_int.astype(np.int32) * kernel_q78_int.astype(np.int32)) >> 8
columnwise_sum = np.sum(elementwise_q78, axis=0).astype(np.int16)

print("\n== Elementwise (Q7.8 mult >> 8) ==")
print(elementwise_q78)

print("\n== Expected psum_outs[0..5] ==")
for i, val in enumerate(columnwise_sum):
    print(f"psum_outs[{i}] = {val / 256:.3f} (Q7.8 hex: {q7_8_to_hex(val)})")